name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

env:
  REGISTRY: portalapiacr.azurecr.io
  IMAGE_NAME: portal-api
  RESOURCE_GROUP: rg-data-migration-portal-prod
  CONTAINER_APP_NAME: portal-api-prod
  CONTAINER_APP_ENV: portal-api-env

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: portalapiacr.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to Container Apps
      uses: azure/container-apps-deploy-action@v1
      with:
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        environmentVariables: |
          NODE_ENV=production
          ENV=production
          AUTH_MODE=strict
          MOCK_MODE=off
          ALLOW_ANON_DOCS=false
          TOKEN_ENV_PREFIX=dhp_live_
          PORT=3000
          ALLOWED_ORIGINS=https://datahubportal.com,https://staging.datahubportal.com
          CORS_MAX_AGE=600
          DB_SCHEMA=public
          RPC_LIST_CONTACTS=api_list_contacts
          RPC_GET_CONTACT=api_get_contact
          RPC_LIST_JOBS=api_list_jobs
          RPC_LIST_JOB_FILES=api_list_job_files

    - name: P0 Security Validation
      run: |
        echo "üîç P0 Security Tests - Validating strict auth deployment..."
        sleep 30
        
        # Test 1: No token should return 401
        echo "Test 1: No Authorization header"
        AUTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://api.datahubportal.com/v1/contacts?limit=1")
        if [ "$AUTH_STATUS" = "401" ]; then
          echo "‚úÖ Test 1 PASSED: Returns 401 without token"
        else
          echo "‚ùå Test 1 FAILED: Expected 401, got $AUTH_STATUS"
          exit 1
        fi
        
        # Test 2: Health endpoint should show strict mode
        echo "Test 2: Health endpoint authMode and mockMode"
        HEALTH_RESPONSE=$(curl -s "https://api.datahubportal.com/v1/health")
        HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | jq -r '.status // "unknown"')
        AUTH_MODE=$(echo "$HEALTH_RESPONSE" | jq -r '.authMode // "unknown"')
        MOCK_MODE=$(echo "$HEALTH_RESPONSE" | jq -r '.mockMode // "unknown"')
        
        echo "Health Response: $HEALTH_RESPONSE"
        
        if [ "$AUTH_MODE" = "strict" ]; then
          echo "‚úÖ Test 2 PASSED: authMode is strict"
        else
          echo "‚ùå Test 2 FAILED: authMode is '$AUTH_MODE', expected 'strict'"
          exit 1
        fi
        
        if [ "$MOCK_MODE" = "false" ]; then
          echo "‚úÖ Test 3 PASSED: mockMode is false"
        else
          echo "‚ùå Test 3 FAILED: mockMode is '$MOCK_MODE', expected 'false'"
          exit 1
        fi
        
        if [ "$HEALTH_STATUS" = "healthy" ] || [ "$HEALTH_STATUS" = "degraded" ]; then
          echo "‚úÖ Test 4 PASSED: Health status is $HEALTH_STATUS"
        else
          echo "‚ùå Test 4 FAILED: Health status is $HEALTH_STATUS"
          exit 1
        fi
        
        echo "üéâ P0 Security validation completed successfully!"
        echo "üìã Production is now configured with:"
        echo "   - AUTH_MODE=strict ‚úÖ"
        echo "   - MOCK_MODE=off ‚úÖ"
        echo "   - 401 responses for missing tokens ‚úÖ"

    - name: Send notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to Azure Container Apps
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      continue-on-error: true