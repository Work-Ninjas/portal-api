// Test script to verify Portal-API Argon2id alignment
const path = require('path');

const TEST_PEPPER = 'production-pepper-for-argon2id';

async function testAlignment() {
  // Dynamic imports to handle ESM/CommonJS compatibility
  const { initTokens: initPortalTokens, generateToken: portalGenerateToken } = await import('../roofr portal/packages/tokens/dist/index.js');
  const { initTokens: initAPITokens, verifyToken: apiVerifyToken } = require('./src/lib/tokens-real.js');
  console.log('🔄 Testing Portal-API Argon2id Alignment...\n');

  try {
    // Initialize both packages with same pepper
    console.log('1. Initializing Portal tokens package...');
    initPortalTokens({
      getPepper: async () => TEST_PEPPER
    });

    console.log('2. Initializing API tokens package...');
    initAPITokens({
      getPepper: async () => TEST_PEPPER,
      params: {
        timeCost: 3,
        memoryCost: 2 ** 16,
        parallelism: 1
      }
    });

    // Generate token using Portal
    console.log('3. Generating token using Portal...');
    const portalResult = await portalGenerateToken('live');
    console.log(`   Generated token: ${portalResult.plaintext.substring(0, 20)}...`);
    console.log(`   Hash: ${portalResult.hash.substring(0, 20)}...`);
    console.log(`   Hash version: ${portalResult.hashVersion}`);
    console.log(`   Salt ID: ${portalResult.hashSaltId}`);

    // Verify token using API
    console.log('4. Verifying token using API...');
    const verifyData = {
      hash: portalResult.hash,
      hashVersion: portalResult.hashVersion,
      hashSaltId: portalResult.hashSaltId
    };

    const isValid = await apiVerifyToken(portalResult.plaintext, verifyData);
    
    if (isValid) {
      console.log('✅ SUCCESS: Portal and API are aligned!');
      console.log('   Token generated by Portal was successfully verified by API');
    } else {
      console.log('❌ FAILURE: Portal and API are NOT aligned!');
      console.log('   Token generated by Portal was rejected by API');
    }

    return isValid;

  } catch (error) {
    console.error('❌ ERROR during alignment test:', error.message);
    return false;
  }
}

// Run the test
testAlignment()
  .then(success => {
    console.log(`\n🏁 Test completed: ${success ? 'ALIGNED' : 'NOT ALIGNED'}`);
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('💥 Test failed:', error);
    process.exit(1);
  });