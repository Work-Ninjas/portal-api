{
	"info": {
		"_postman_id": "portal-api-v1-rc1",
		"name": "Portal API v1.0.0-rc.1",
		"description": "Complete Portal API collection for contacts, jobs, and files with signed URLs. Ready for production testing and monitoring.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "portal-team"
	},
	"item": [
		{
			"name": "Health & Monitoring",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('traceId');",
									"});",
									"",
									"pm.test(\"Service is healthy\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});",
									"",
									"pm.test(\"Rate limit headers present\", function () {",
									"    pm.response.to.have.header('X-RateLimit-Limit');",
									"    pm.response.to.have.header('X-RateLimit-Remaining');",
									"    pm.response.to.have.header('X-RateLimit-Reset');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Metrics (JSON)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/metrics",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Metrics (Prometheus)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/metrics?format=prometheus",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"metrics"
							],
							"query": [
								{
									"key": "format",
									"value": "prometheus"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contacts",
			"item": [
				{
					"name": "List Contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('limit');",
									"    pm.expect(jsonData).to.have.property('offset');",
									"    pm.expect(jsonData).to.have.property('has_more');",
									"});",
									"",
									"pm.test(\"Rate limit headers present\", function () {",
									"    pm.response.to.have.header('X-RateLimit-Limit');",
									"    pm.response.to.have.header('X-RateLimit-Remaining');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/contacts?limit=10&offset=0",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"contacts"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Contacts",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/contacts?q=john&limit=5",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"contacts"
							],
							"query": [
								{
									"key": "q",
									"value": "john"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contact by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contact has required fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/contacts/550e8400-e29b-41d4-a716-446655440000",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"contacts",
								"550e8400-e29b-41d4-a716-446655440000"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Jobs",
			"item": [
				{
					"name": "List Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has pagination\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('limit');",
									"    pm.expect(jsonData).to.have.property('offset');",
									"});",
									"",
									"pm.test(\"Jobs have valid status\", function () {",
									"    const jsonData = pm.response.json();",
									"    const validStatuses = ['open', 'scheduled', 'in_progress', 'blocked', 'awaiting_review', 'completed', 'canceled', 'archived'];",
									"    jsonData.data.forEach(job => {",
									"        pm.expect(validStatuses).to.include(job.status);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/jobs?limit=10&offset=0",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"jobs"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter Jobs by Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/jobs?status=in_progress&limit=5",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"jobs"
							],
							"query": [
								{
									"key": "status",
									"value": "in_progress"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Files (Gate C)",
			"item": [
				{
					"name": "List Job Files (All)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Files endpoint rate limit (120 RPM)\", function () {",
									"    pm.expect(pm.response.headers.get('X-RateLimit-Limit')).to.eql('120');",
									"});",
									"",
									"pm.test(\"Cache control headers present\", function () {",
									"    pm.response.to.have.header('Cache-Control');",
									"    pm.response.to.have.header('Pragma');",
									"});",
									"",
									"pm.test(\"Files have signed URLs\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        pm.expect(jsonData.data[0]).to.have.property('signed_url');",
									"        pm.expect(jsonData.data[0]).to.have.property('expires_at');",
									"    }",
									"});",
									"",
									"pm.test(\"Expiry within 15 minutes\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data.length > 0) {",
									"        const expiresAt = new Date(jsonData.data[0].expires_at);",
									"        const now = new Date();",
									"        const diffMinutes = (expiresAt - now) / (1000 * 60);",
									"        pm.expect(diffMinutes).to.be.below(16); // Allow 1min buffer",
									"        pm.expect(diffMinutes).to.be.above(13);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/jobs/{{JOB_ID}}/files?limit=10",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"jobs",
								"{{JOB_ID}}",
								"files"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter Files by Kind - Photos",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/jobs/{{JOB_ID}}/files?kind=photo&limit=5",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"jobs",
								"{{JOB_ID}}",
								"files"
							],
							"query": [
								{
									"key": "kind",
									"value": "photo"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter Files by Kind - Documents",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/jobs/{{JOB_ID}}/files?kind=document&limit=5",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"jobs",
								"{{JOB_ID}}",
								"files"
							],
							"query": [
								{
									"key": "kind",
									"value": "document"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Cases",
			"item": [
				{
					"name": "Invalid UUID Format (400)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response format\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('type');",
									"    pm.expect(jsonData).to.have.property('title');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData).to.have.property('code');",
									"    pm.expect(jsonData).to.have.property('traceId');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/contacts/invalid-uuid-format",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"contacts",
								"invalid-uuid-format"
							]
						}
					},
					"response": []
				},
				{
					"name": "Job Not Found (404)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error response format\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql('NOT_FOUND');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/jobs/job_nonexist/files",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"jobs",
								"job_nonexist",
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid File Kind (422)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Validation error format\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql('VALIDATION_FAILED');",
									"    pm.expect(jsonData).to.have.property('errors');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/jobs/{{JOB_ID}}/files?kind=invalid_kind",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"jobs",
								"{{JOB_ID}}",
								"files"
							],
							"query": [
								{
									"key": "kind",
									"value": "invalid_kind"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Load Testing",
			"item": [
				{
					"name": "Rapid Health Checks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This request can be used with Postman Runner for load testing",
									"// Set iterations to 100+ to test rate limiting"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{API_KEY}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/v1/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"v1",
								"health"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Portal API Request:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script - runs after every request",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000); // 5 second timeout",
					"});",
					"",
					"pm.test(\"No server errors\", function () {",
					"    pm.expect(pm.response.code).to.be.below(500);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "collection_version",
			"value": "1.0.0-rc.1",
			"type": "string"
		}
	]
}